package week_7.heogeonho;

public class PGS_등굣길 {
	
	/*
	최근 경로찾기 문제를 이것저것 풀다보니 좀 아이디어를 생각하는데 좀 더 수월했던 것 같다
	같은 범위의 2차원 배열을 만들어 시작점 부터 경로의 수를 계산하고
	메모이제이션을 통해 다음 칸의 경로의 수를 계산한다!?

	물웅덩이 위치 처리를 어떻게할지 고민하다가 처리 값을 따로 설정하여 구현하기로 함
	나누는 이유에 대해서는 설명이 필요한 것 같음 (이런건 어느 상황에 어떻게 처리해줘야 하는가... 라던지)
	 */
	public int solution(int m, int n, int[][] puddles) {
		int[][] dp = new int[n][m];

		// 물에 잠긴 지역은 경로 수를 제외!
		for (int[] p : puddles) {
			dp[p[1] - 1][p[0] - 1] = -1;
		}

		// 시작 위치는 1로 설정 (자신에게 오는 경로)
		dp[0][0] = 1;

		// DP 테이블 계산
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				// 물에 잠긴 지역은 건너뛰기
				if (dp[i][j] == -1) {
					dp[i][j] = 0;
					continue;
				}

				// 위에서 오는 경로 추가
				if (i > 0) {
					dp[i][j] += dp[i - 1][j];
				}

				// 왼쪽에서 오는 경로 추가
				if (j > 0) {
					dp[i][j] += dp[i][j - 1];
				}

				dp[i][j] %= 1000000007;
			}
		}

		// 도착 위치의 경로 수 반환
		return dp[n - 1][m - 1];
	}


}

/*
정확성  테스트
테스트 1 〉	통과 (0.02ms, 72MB)
테스트 2 〉	통과 (0.03ms, 65.3MB)
테스트 3 〉	통과 (0.03ms, 79.7MB)
테스트 4 〉	통과 (0.05ms, 68.1MB)
테스트 5 〉	통과 (0.03ms, 75.7MB)
테스트 6 〉	통과 (0.05ms, 81.8MB)
테스트 7 〉	통과 (0.03ms, 73.9MB)
테스트 8 〉	통과 (0.04ms, 71.7MB)
테스트 9 〉	통과 (0.04ms, 73MB)
테스트 10 〉	통과 (0.03ms, 75.3MB)
효율성  테스트
테스트 1 〉	통과 (0.91ms, 60.3MB)
테스트 2 〉	통과 (0.39ms, 52MB)
테스트 3 〉	통과 (0.49ms, 68.2MB)
테스트 4 〉	통과 (0.55ms, 52.2MB)
테스트 5 〉	통과 (0.55ms, 51.9MB)
테스트 6 〉	통과 (0.93ms, 68.5MB)
테스트 7 〉	통과 (0.38ms, 51.7MB)
테스트 8 〉	통과 (0.71ms, 52.5MB)
테스트 9 〉	통과 (0.75ms, 52.3MB)
테스트 10 〉	통과 (0.69ms, 52.2MB)
*/
