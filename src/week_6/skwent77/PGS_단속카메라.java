package week_6.skwent77;

import java.util.Arrays;
/*
// 첫 번째 차량의 도착 지점에 카메라를 설치한다고 가정합니다.
// 첫 번째 차량의 도착 지점에 카메라를 설치한 것으로 간주하고 ans를 1로 초기화합니다.
 */
public class PGS_단속카메라 {
    // 2.2 도착점 기준으로 정렬하기
// 차량의 도착 지점(끝점)을 기준으로 오름차순 정렬합니다.
// 만약 두 차량의 도착 지점이 동일하다면, 출발 지점(시작점)을 기준으로 정렬합니다.
    public int solution(int[][] routes){
        int answer =0;
        Arrays.sort(routes,(o1,o2)->{
            if (o1[1] == o2[1]) {
                return o1[0] - o2[0]; // 도착 지점이 같다면, 출발 지점 오름차순으로 정렬
            }
            return o1[1] - o2[1]; // 도착 지점 오름차순으로 정렬
        });

    // 3. 카메라 수 구하기
        answer =1 ;

        // 첫 번째 차량의 도착 지점을 기준으로 카메라를 설치한 위치를 저장합니다.
        int end = routes[0][1];

    // 두 번째 차량부터 마지막 차량까지 반복합니다.
        for(int i = 1; i<routes.length; i++) {
            // 현재 차량의 출발 지점이 이전에 설치한 카메라의 위치(end)보다 뒤에 있다면,
            // 이전 카메라로는 이 차량을 단속할 수 없으므로 새로운 카메라가 필요합니다.
            if (routes[i][0] > end) {
                answer += 1; // 새로운 카메라를 설치합니다.
                end = routes[i][1]; // end 변수: 카메라의 위치
            }
        }
        return answer;
    }

}

/* 실행 결과
정확성 50
테스트 1 〉	통과 (0.71ms, 74.1MB)
테스트 2 〉	통과 (0.53ms, 84.7MB)
테스트 3 〉	통과 (0.56ms, 79.4MB)
테스트 4 〉	통과 (0.78ms, 77.3MB)
테스트 5 〉	통과 (0.55ms, 75.1MB)
효율성 50
테스트 1 〉	통과 (4.17ms, 52.8MB)
테스트 2 〉	통과 (3.57ms, 52.5MB)
테스트 3 〉	통과 (6.23ms, 53.7MB)
테스트 4 〉	통과 (0.88ms, 52.3MB)
테스트 5 〉	통과 (12.22ms, 54.3MB)
 */